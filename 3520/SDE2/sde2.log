/*******************************************************************************************************************/
/* given data for illustration and testing */

allAct([-10.0,5.0,-1.0,2.3,0.0,7.7,-3.5]).
data(oi,[-1.0,-1.0]).
data(we,[[0.0,-1.0],[-1.0,0.0]]). /* for cycle */

/* some 4-D data for simulation/debugging */
data(os1,[1.0, -1.0, 1.0, -1.0]).
data(os2,[-1.0, -1.0, 1.0, -1.0]).
data(os3,[-1.0, -1.0, 1.0, 1.0]).

/* more data for state crowding and other effects */
data(os4,[1.0, 1.0, 1.0, 1.0]).
data(os5,[-1.0, -1.0, -1.0, -1.0]).
data(os6,[1.0, 1.0, -1.0, -1.0]).
data(o1o2o3,[[1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, 1.0]]).
data(o1o1o1o2o3,[[1.0, -1.0, 1.0, -1.0],[1.0, -1.0, 1.0, -1.0],[1.0, -1.0, 1.0,-1.0],[-1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, 1.0]]).
data(w,[[0.0, -1.0, 1.0, -1.0],[-1.0, 0.0, -1.0, 1.0],[1.0, -1.0, 0.0, -1.0],[-1.0, 1.0, -1.0, 0.0]]).
/*******************************************************************************************************************/


/*******************************************************************************************************************/
/*ALL OF MY OWN TEST CASES*/

/*hop11Activation testing*/
hop11Activation(-4.5,-2,What).
/*What = -1.0.*/

hop11Activation(3.25,-3.25,What).
/*What = 1.0.*/


/*netUnit testing*/
netUnit([0.0, -1.0],[-1.0, 0.0],NU).
/*NU = 0.0.*/

netUnit([1.0, -1.0],[-1.0, 1.0],NU).
/*NU = -2.0.*/


/*hopTrainAstate testing*/
hopTrainAstate([1.0,-1.0,1.0,-1.0],WM).
/*WM = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]].

hopTrainAstate([1.0,-1.0,-1.0,1.0],WM).
/*WM = [[0.0, -1.0, -1.0, 1.0], [-1.0, 0.0, 1.0, -1.0], [-1.0, 1.0, 0.0,
-1.0], [1.0, -1.0, -1.0, 0.0]].*/


/*hopTrain testing*/
hopTrain([[1.0,1.0]],W1).
/*W1 = [[0.0, 1.0], [1.0, 0.0]].*/

data(o1o1o1o2o3,H),hopTrain(H,W3).
/*H = [[1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0,
-1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W3 = [[0.0, -1.0, 1.0, -3.0], [-1.0, 0.0, -5.0, 3.0], [1.0, -5.0, 0.0,
-3.0], [-3.0, 3.0, -3.0, 0.0]].
*/


/*nextState testing*/
data(o1o2o3,H2),hopTrain(H2,W4),data(os2,O2),nextState(O2,W4,NS).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0
, 1.0]],
W4 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]],
O2 = NS, NS = [-1.0, -1.0, 1.0, -1.0].*/

data(o1o1o1o2o3,H2),hopTrain(H2,W4),data(os3,O3),nextState(O3,W4,NS).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0,
-1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W4 = [[0.0, -1.0, 1.0, -3.0], [-1.0, 0.0, -5.0, 3.0], [1.0, -5.0, 0.0,
-3.0], [-3.0, 3.0, -3.0, 0.0]],
O3 = [-1.0, -1.0, 1.0, 1.0],
NS = [-1.0, -1.0, 1.0, -1.0].
*/

/*updateN testing*/
data(o1o2o3,H2),hopTrain(H2,W2),data(os2,O2),updateN(O2,W2,0,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0
, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]],
O2 = Res, Res = [-1.0, -1.0, 1.0, -1.0].
*/

data(o1o2o3,H2),hopTrain(H2,W2),data(os2,O2),updateN(O2,W2,1,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0
, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]],
O2 = Res, Res = [-1.0, -1.0, 1.0, -1.0].
*/


/*findsEquilibrium testing*/
findsEquilibrium([0.0,1.0],[[0.0, -1.0], [-1.0, 0.0]],3).
/*true.*/

data(os2,A),data(w,W),findsEquilibrium(A,W,10).
/*A = [-1.0, -1.0, 1.0, -1.0],
W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]].
*/

data(os3,A),data(w,W),findsEquilibrium(A,W,4).
/*false.*/


/*energy testing*/
data(os2,A),data(w,W),energy(A,W,E).
/*A = [-1.0, -1.0, 1.0, -1.0],
W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]],
E = -0.0.
*/

data(os3,A),data(w,W),energy(A,W,E).
/*A = [-1.0, -1.0, 1.0, 1.0],
W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0,
-1.0], [-1.0, 1.0, -1.0, 0.0]],
E = 2.0.
*/
