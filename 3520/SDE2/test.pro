/*******************************************************************************************************************/
/* data for illustration and testing */

allAct([-10.0,5.0,-1.0,2.3,0.0,7.7,-3.5]).
data(oi,[-1.0,-1.0]).
data(we,[[0.0,-1.0],[-1.0,0.0]]). /* for cycle */

/* some 4-D data for simulation/debugging */
data(os1,[1.0, -1.0, 1.0, -1.0]).
data(os2,[-1.0, -1.0, 1.0, -1.0]).
data(os3,[-1.0, -1.0, 1.0, 1.0]).

/* more data for state crowding and other effects */
data(os4,[1.0, 1.0, 1.0, 1.0]).
data(os5,[-1.0, -1.0, -1.0, -1.0]).
data(os6,[1.0, 1.0, -1.0, -1.0]).
data(o1o2o3,[[1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, 1.0]]).
data(o1o1o1o2o3,[[1.0, -1.0, 1.0, -1.0],[1.0, -1.0, 1.0, -1.0],[1.0, -1.0, 1.0,-1.0],[-1.0, -1.0, 1.0, -1.0],[-1.0, -1.0, 1.0, 1.0]]).
data(w,[[0.0, -1.0, 1.0, -1.0],[-1.0, 0.0, -1.0, 1.0],[1.0, -1.0, 0.0, -1.0],[-1.0, 1.0, -1.0, 0.0]]).
/*******************************************************************************************************************/

/*******************************************************************************************************************/
/* Consult source files
sde2_given_predicates.pro and (your) sde2_sp2020.pro and data.pro

['sde2_given_predicates.pro', 'data.pro', 'help.pro'].
/*true.*/
/*******************************************************************************************************************/

hop11Activation(-1,-1,What).
/*What = -1.*/
hop11Activation(-0.1,-1,What).
/*What = -1.*/
hop11Activation(0.1,-1,What).
/*What = 1.*/
hop11Activation(0.1,1,What).
/*What = 1.*/
hop11Activation(0.0,1,What).
/*false.*/                  /*typo???*/
hop11Activation(0.0,1,What).
/*What = 1.*/
hop11Activation(0.0,-1,What).
/*What = -1.*/

netUnit([-1.0, -1.0],[0.0, -1.0],NU).
/*NU = 1.0.*/

hopTrainAstate([-1.0,1.0,-1.0,1.0],WM).
/*WM = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]].*/

hopTrain([[-1.0,-1.0]],W1).
/*W1 = [[0.0, 1.0], [1.0, 0.0]].*/

hopTrain([[-1.0,1.0]],W1).
/*W1 = [[0.0, -1.0], [-1.0, 0.0]].*/

data(o1o2o3,Show).
/*Show = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]].*/

data(o1o2o3,H),hopTrain(H,W3).
/*H = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W3 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]].*/

data(o1o1o1o2o3,H2),hopTrain(H2,W4),data(os2,O2),nextState(O2,W4,NS).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0, -1.0], [1.0, -1.0, 1.0, -1.0],
[-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W4 = [[0.0, -1.0, 1.0, -3.0], [-1.0, 0.0, -5.0, 3.0], [1.0, -5.0, 0.0, -3.0],
[-3.0, 3.0, -3.0, 0.0]],
O2 = [-1.0, -1.0, 1.0, -1.0],
NS = [1, -1, 1, -1].*/

/* test updateN */
data(o1o2o3,H2),hopTrain(H2,W2),data(os1,O1),updateN(O1,W2,0,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]],
O1 = Res, Res = [1.0, -1.0, 1.0, -1.0].*/

data(o1o2o3,H2),hopTrain(H2,W2),data(os1,O1),updateN(O1,W2,1,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]],
O1 = [1.0, -1.0, 1.0, -1.0],
Res = [-1, -1, 1, -1].*/

data(o1o2o3,H2),hopTrain(H2,W2),data(os1,O1),updateN(O1,W2,2,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]],
O1 = [1.0, -1.0, 1.0, -1.0],
Res = [-1, -1, 1, -1].*/

data(o1o2o3,H2),hopTrain(H2,W2),data(os3,O3),updateN(O3,W2,1,Res).
/*H2 = [[1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, -1.0], [-1.0, -1.0, 1.0, 1.0]],
W2 = [[0.0, 1.0, -1.0, -1.0], [1.0, 0.0, -3.0, 1.0], [-1.0, -3.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]],
O3 = [-1.0, -1.0, 1.0, 1.0],
Res = [-1, -1, 1, -1].*/

data(oi,Oi),data(we,W),updateN(Oi,W,1,Next).
/*Oi = [-1.0, -1.0],
W = [[0.0, -1.0], [-1.0, 0.0]],
Next = [1, 1].*/

data(oi,Oi),data(we,W),updateN(Oi,W,2,Next).
/*Oi = [-1.0, -1.0],
W = [[0.0, -1.0], [-1.0, 0.0]],
Next = [-1, -1].*/

data(oi,Oi),data(we,W),updateN(Oi,W,3,Next).
/*Oi = [-1.0, -1.0],
W = [[0.0, -1.0], [-1.0, 0.0]],
Next = [1, 1].*/

data(oi,Oi),data(we,W),updateN(Oi,W,4,Next).
/*Oi = [-1.0, -1.0],
W = [[0.0, -1.0], [-1.0, 0.0]],
Next = [-1, -1].*/


/* test findsEquilibrium */
findsEquilibrium([-1.0,-1.0],[[0.0, -1.0], [-1.0, 0.0]],5).
/*false.*/
data(w,W).
/*W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]].*/
data(os1,A).
/*A = [1.0, -1.0, 1.0, -1.0].*/
data(os1,A),data(w,W),findsEquilibrium(A,W,3).
/*A = [1.0, -1.0, 1.0, -1.0],
W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]].*/


/* test energy */
data(os1,A),data(w,W),energy(A,W,E).
/*A = [1.0, -1.0, 1.0, -1.0],
W = [[0.0, -1.0, 1.0, -1.0], [-1.0, 0.0, -1.0, 1.0], [1.0, -1.0, 0.0, -1.0],
[-1.0, 1.0, -1.0, 0.0]],
E = -6.0.*/
