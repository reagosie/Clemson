(* some 4-D (4 unit) data for simulation/debugging *)

let os1 = [1.0; -1.0; 1.0; -1.0];;
(*val os1 : float list = [1.; -1.; 1.; -1.]*)

let os2 = [-1.0; -1.0; 1.0; -1.0];;
(*val os2 : float list = [-1.; -1.; 1.; -1.]*)

let os3 = [-1.0; -1.0; 1.0; 1.0];;
(*val os3 : float list = [-1.; -1.; 1.; 1.]*)

(* show Eqns (4) and (5) in action *)

let w=hopTrain([os1]);;
(*val w : float list list = [[0.; -1.; 1.; -1.]; [-1.; 0.; -1.; 1.]; [1.; -1.; 0.; -1.]; [-1.; 1.; -1.; 0.]]*)

let w2 = [[0.; 1.; -1.; -1.]; [1.; 0.; -3.; 1.]; [-1.; -3.; 0.; -1.]; [-1.; 1.; -1.; 0.]];;
let we=[[0.0;-1.0];[-1.0;0.0]];;
let oi=[-1.0;-1.0];;



(*netUnit testing*)
netUnit([-1.; -1.; 1.; -1.],[1.; 0.; -3.; 1.]);;
netUnit([-1.; -1.],[1.; 0.]);;
netUnit(os1,[1.;2.;3.;1.]);;

(*netAll testing*)
netAll(os1,w);;
netAll(os2,w);;

(*hop11Activation testing*)
hop11Activation(-3., 1.);;
hop11Activation(3., 1.);;
hop11Activation(0., 1.);;

(*hop11ActAll testing*)
hop11ActAll([-10.;34.5;0.0;-1.0],os1);;
hop11ActAll([-5.;27.;2.;-5.5],os2);;

(*nextState testing*)
nextState(os1,w);;
nextState(os2,w);;
nextState(os1,w2);;
nextState(nextState(os1,w2),w2);;

(*updateN testing*)
updateN(oi,we,1);;
updateN(oi,we,2);;
updateN(oi,we,3);;
updateN(oi,we,4);;

(*findsEquilibrium testing*)
findsEquilibrium(os1,w,3);;
findsEquilibrium(oi,we,5);;

(*energy testing*)
energy(os1,w);;
energy(os2,w);;
energy(os3,w);;

(*hopTrainAstate testing*)
hopTrainAstate(os1);;
hopTrainAstate(os2);;
hopTrainAstate(os3);;

(*hopTrain testing*)
let w2 = hopTrain([os1;os2;os3]);;
hopTrain([os1]);;
