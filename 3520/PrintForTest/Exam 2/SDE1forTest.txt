(** sde1_sp2020_given_functions.caml
    4 GIVEN FUNCTIONS FOR CODE READING AND POSSIBLE REUSE
    Hopfield ocaml simulation/extension for Sp2020 *)

open List;;

let rec inner = function (i, w) ->
if i==[] && w == [] then 0.0
 else
 (hd i) *. (hd w)
     +. inner((tl i), (tl w));;

let rec netUnit = function (inputs, weights) ->
if inputs==[] && weights == [] then 0.0
 else
((hd inputs) *. (hd weights))
     +. netUnit((tl inputs), (tl weights));;

let rec netAll = function (state, weightMatrix) ->
if weightMatrix==[] then []
 else
netUnit (state,(hd weightMatrix))
     :: netAll(state, (tl weightMatrix));;

let hop11Activation = function (net,oldo) ->
 if (net > 0.0) then 1.0
                  else if (net = 0.0) then oldo
                                         else -1.0;;

let rec hop11ActAll = function (allNet,oldState) ->
if (allNet==[]) then []
                else
                hop11Activation((hd allNet),(hd oldState)) ::
                     hop11ActAll((tl allNet),(tl oldState));;

--------------------------------------------------------------------------

(*  Helper function: This function ultimately helps hopTrainAstate.
    It essentially makes a "row" (that is, a list) of the matrix that hopTrainAstate is making. Col is a position placeholder.
    If col = row (which will be the matrix diagonal), insert a 0.
    It returns a float list.
*)
let rec createList = function (state, value, row, col) ->
    if state == []
        then []
    else if col == row
        then 0. :: createList(List.tl state, value, row, col + 1)
    else
        (value *. List.hd state) :: createList(List.tl state, value, row, col + 1);;

(*  Helper function: This function ultimately helps hopTrain.
    It adds the elements of a list together and calls itself recursively.
    It returns a float list.
*)
let rec addList = function (first, second) ->
    if first == [] && second == []
        then []
    else
        List.hd first +. List.hd second :: addList(List.tl first, List.tl second);;

(*  This function is the next state computation. It returns next state vector.
    It returns a float list.
*)
let nextState = function (currentState, weightMatrix) ->
    if currentState == []
        then []
    else
        hop11ActAll(netAll(currentState,  weightMatrix), currentState);;

(*  This function returns the network state after n time steps (i.e. update of N time steps).
    It returns a float list.
*)
let rec updateN = function (currentState, weightMatrix, n) ->
    if n == 0
        then currentState
    else
        updateN(nextState(currentState, weightMatrix), weightMatrix, n - 1);;

(*  Helper function: This function helps hopTrainAstate.
    It uses createList to create multiple rows (lists) that form the matrix that hopTrainAstate will return.
    It returns a float list list.
*)
let rec createMatrix = function (state, staticState, row) ->
    if state == []
        then []
    else
        createList(staticState, List.hd state, row, 0) :: createMatrix(List.tl state, staticState, row + 1);;

(*  Helper function: This function ultimately helps hopTrain.
    It uses addList to add multiple rows (lists) that make up the matrix that hopTrainAstate will return (passed through via addWeights() ).
    It returns a float list list.
*)
let rec addMatrix = function (first, second) ->
    if first == [] && second == []
        then []
    else
        addList(List.hd first, List.hd second) :: addMatrix(List.tl first, List.tl second);;

(*  Helper function: This function helps hopTrainAstate.
    It uses addMatrix to add up all the rows (lists) that make up the matrix that hopTrainAstate will return.
    It returns a float list list.
*)
let rec addWeights = function (weights) ->
    if weights == []
        then []
    else if List.tl weights == []
        then List.hd weights
    else if List.tl(List.tl weights) == []
        then addWeights([addMatrix(List.hd weights, List.hd(List.tl weights))])
    else
        addWeights(addMatrix(List.hd weights, List.hd(List.tl weights)) :: List.tl(List.tl weights));;

(*  This function returns weight matrix for only one stored state, used as a ’warmup’ for the next function.
    It returns a float list list.
*)
let hopTrainAstate = function (astate) ->
    createMatrix(astate, astate, 0);;

(*  This returns a weight matrix, given a list of stored states (shown previously) using Eqns (4) and (5).
    It returns a float list list.
*)
let rec hopTrain = function (allStates) ->
    if allStates = []
        then []
    else if (List.tl allStates) = []
        then hopTrainAstate(List.hd allStates)
    else
        addWeights(hopTrainAstate(List.hd allStates)  :: hopTrain(List.tl allStates) :: []);;

(*  This function returns true if the network reaches an equilibrium state within range steps and returns false otherwise.
    It returns a boolean value.
*)
let findsEquilibrium = function (initialState, weightMatrix, range) ->
    if range == 0
        then false
    else if (updateN(initialState, weightMatrix, range) = updateN(initialState, weightMatrix, range-1))
        then true
    else
        false;;

(*  Helper function: This function helps energy.
    It is essentially just a simple recursive way to find the size of a list.
    It returns a float.
*)
let rec getListSize = function(list) ->
    if list == []
        then 0
    else
        1 + getListSize(List.tl list);;

(*  This function implements the Hopfield Energy equation.
    It returns a float.
*)
let rec energy = function (state, weightMatrix) ->
    if weightMatrix == []
        then 0.
    else
        -(0.5)
        *. (List.nth state (getListSize(state) - getListSize(weightMatrix)))
        *. netUnit(state, List.hd weightMatrix) +. energy(state, List.tl weightMatrix);;


--------------------------------------------------------------------------------------------------
TESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTINGTESTING
(* some 4-D (4 unit) data for simulation/debugging *)

let os1 = [1.0; -1.0; 1.0; -1.0];;
(*val os1 : float list = [1.; -1.; 1.; -1.]*)

let os2 = [-1.0; -1.0; 1.0; -1.0];;
(*val os2 : float list = [-1.; -1.; 1.; -1.]*)

let os3 = [-1.0; -1.0; 1.0; 1.0];;
(*val os3 : float list = [-1.; -1.; 1.; 1.]*)

(* show Eqns (4) and (5) in action *)

let w=hopTrain([os1]);;
(*val w : float list list = [[0.; -1.; 1.; -1.]; [-1.; 0.; -1.; 1.]; [1.; -1.; 0.; -1.]; [-1.; 1.; -1.; 0.]]*)

let w2 = [[0.; 1.; -1.; -1.]; [1.; 0.; -3.; 1.]; [-1.; -3.; 0.; -1.]; [-1.; 1.; -1.; 0.]];;
let we=[[0.0;-1.0];[-1.0;0.0]];;
let oi=[-1.0;-1.0];;



(*netUnit testing*)
netUnit([-1.; -1.; 1.; -1.],[1.; 0.; -3.; 1.]);;
netUnit([-1.; -1.],[1.; 0.]);;
netUnit(os1,[1.;2.;3.;1.]);;

(*netAll testing*)
netAll(os1,w);;
netAll(os2,w);;

(*hop11Activation testing*)
hop11Activation(-3., 1.);;
hop11Activation(3., 1.);;
hop11Activation(0., 1.);;

(*hop11ActAll testing*)
hop11ActAll([-10.;34.5;0.0;-1.0],os1);;
hop11ActAll([-5.;27.;2.;-5.5],os2);;

(*nextState testing*)
nextState(os1,w);;
nextState(os2,w);;
nextState(os1,w2);;
nextState(nextState(os1,w2),w2);;

(*updateN testing*)
updateN(oi,we,1);;
updateN(oi,we,2);;
updateN(oi,we,3);;
updateN(oi,we,4);;

(*findsEquilibrium testing*)
findsEquilibrium(os1,w,3);;
findsEquilibrium(oi,we,5);;

(*energy testing*)
energy(os1,w);;
energy(os2,w);;
energy(os3,w);;

(*hopTrainAstate testing*)
hopTrainAstate(os1);;
hopTrainAstate(os2);;
hopTrainAstate(os3);;

(*hopTrain testing*)
let w2 = hopTrain([os1;os2;os3]);;
hopTrain([os1]);;
